{"version":3,"sources":["scripts.min.js"],"names":["apikey","actions","actionsLi","xhr","XMLHttpRequest","symbol","readyState","open","status","document","querySelector","resultsTimes","result","resultMeta","resultsDetails","numberIsPositive","positiveOrNegativeClass","latestResult","resultOpen","resultLow","resultHight","resultClose","resultVolume","viewHTML","resultSymbol","resultRefreshed","parseFloat","toFixed","insertAdjacentHTML","getActions","getAttribute","closeDay","valueCloseDay","getActionsClosePreviousDay","porcetagem","resultsDaily","resultFinish","newResult","oldResult","porcetagemFinish","Math","onreadystatechange","JSON","parse","response","console","send","querySelectorAll","forEach","item","index"],"mappings":"cAAA,WAEE,SAAMA,EAASC,GACf,IAAMC,EAAAA,EAIEC,EAAM,IAAIC,eADhBD,EAAIE,KAAAA,MAAJ,0EAAAA,EAAA,yBAAAL,EAAA,kBACAG,EAAMA,mBAAUC,WAIQ,IAAnBD,EAAIG,aAFT,MAAIC,EAAKC,OA2DTC,SAASC,GACV,IAAAC,EAAAC,EAAA,sBAIKC,EAAaD,EAAO,aAF1BE,KAKE,IAAIC,KAAAA,EACJD,EAAIE,KAAAA,EAAAA,IAEJ,IAAAC,EAAeN,EAAc,GAE5BO,EAAAD,EAAA,WACGA,EAAAA,EAAeH,WAIfK,EAAYF,EAAa,UAFzBC,EAAaD,EAAa,YAC1BG,EAAcH,EAAa,aAE3BI,EAAcJ,EAAAA,aACdK,EAAeL,EAAa,qBAoB5BM,EAAAA,wDAAmEC,EAAnE,oIACqEC,EADrE,wFAG6BC,WAAWR,GAAYS,QAAQ,GAH5D,8CAUmBD,WAAkBF,GAAcG,QAAMC,GAVzD,8CAK8BF,WAAWN,GAAaO,QAAQ,GAL9D,4CAYuBH,WAAcH,GAAzCM,QAAA,GAZI,+CAcLD,WAAAJ,GAAAK,QAAA,GAdK,yBAiBFE,SAAAA,cAAgBC,iBAAaN,EAA7B,MAAAI,mBAAA,YAAAL,GA1GFpB,SAAAF,EAAA8B,GACD,IAAA1B,EAAAJ,EAIK+B,EAAgBD,EAFtB5B,EAAS8B,IAAAA,eACP9B,EAAIE,KAAAA,MAAJ,uEAAAA,EAAA,cAAAL,EAAA,kBACAG,EAAI6B,mBAAgBD,WACJ3B,IAAVD,EAAMG,aACZ,MAAAH,EAASK,OAiBT,SAAkB0B,EAAaF,GAChC,IAAAG,EAAAvB,EAAA,uBAIKC,EAAaD,EAAO,aAF1BwB,KAEE,IAAIvB,KAAAA,EACJuB,EAAIA,KAAeD,EAAnBvB,IAGEwB,IAKEf,EALFe,EAAkBD,GAKW,YAF3BlB,EAAemB,EAAAA,aAOfC,EAAYX,WAAWM,GAF3BM,EAAAZ,WAAAL,GAIIa,GAAgBG,EAAYC,GAAaA,EAAa,IAFtDD,EAAYX,KAAWM,MAA3B,IAA2BA,GAA3B,IAGAvB,SAAI8B,cAAmBC,iBAAWN,EAAlC,+BAAAN,mBAAA,YAAAW,GAtCIE,CAAJC,KAAyBC,MAAAxC,EAAMyC,UAAAZ,GAE3Ba,QAAQrC,IAAJ,gBAIHL,EAAA2C,OA8FNb,CAAAT,EAAAH,GArHKoB,CAAAA,KAAJE,MAAyBxC,EAAAyC,WAErBC,QAAOrC,IAAJ,gBAIFL,EAAA2C,OAhBR,IAAA9C,EAAU,mBACTS,SAAAsC,iBAAA,uBA2HYC,QAAQ,SAASC,EAAMC,GAC/BrB,EAAWoB,EAAKnB,aAAa,kBA7HnC","file":"scripts.min.js","sourcesContent":["(function(){\n  'use strict';\n  const apikey = 'JC86LIY595WFPL8F';\n  const actionsLi = document.querySelectorAll('[data-js=\"actions\"]');\n  \n  function getActions(actions) {\n    let symbol = actions;\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${symbol}&interval=1min&apikey=${apikey}&datatype=json`);\n    xhr.onreadystatechange = () => {\n      if(xhr.readyState === 4){\n        if(xhr.status === 200){\n          viewActions(JSON.parse(xhr.response));\n        }else{\n          console.log('deu errado');\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  function getActionsClosePreviousDay(actions, closeDay){\n    let symbol = actions;\n    let valueCloseDay = closeDay;\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}.SA&apikey=${apikey}&datatype=json`);\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          closePreviousDay(JSON.parse(xhr.response), valueCloseDay);\n        } else {\n          console.log('deu errado');\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  function generatesVariation(valueNew, valueOld) {\n    let newResult = parseFloat(valueNew);\n    let oldResult = parseFloat(valueOld);\n    let porcetagem = (((newResult - oldResult) / oldResult) * 100);\n    return Math.round(porcetagem * 100) / 100;\n  }\n\n  function closePreviousDay(result, valueCloseDay){\n    let resultsDaily = result[\"Time Series (Daily)\"];\n    let resultMeta = result[\"Meta Data\"];\n    let resultFinish = [];\n\n    for (result in resultsDaily) {\n      resultFinish.push(resultsDaily[result]);\n    }\n\n    let latestResult = resultFinish[0];\n\n    let resultClose = latestResult[\"4. close\"];\n    let resultSymbol = resultMeta[\"2. Symbol\"];\n\n    //console.log(resultSymbol, resultClose, valueCloseDay);\n\n    let newResult = parseFloat(valueCloseDay);\n    let oldResult = parseFloat(resultClose);\n    let porcetagem = (((newResult - oldResult) / oldResult) * 100);\n    let porcetagemFinish = Math.round(porcetagem * 100) / 100;\n    \n    //document.querySelector('[data-symbol=\"' + resultSymbol + '\"]').setAttribute('closeDay', 'resultClose');\n    document.querySelector('[data-symbol=\"' + resultSymbol + '\"] .box-actions--percentage').insertAdjacentHTML('beforeend', porcetagemFinish);\n  }\n\n  function viewActions(result){\n    let resultsTimes = result[\"Time Series (1min)\"];\n    let resultMeta = result[\"Meta Data\"];\n    let resultsDetails = [];\n    let percentageResult;\n    let numberIsPositive;\n    let positiveOrNegativeClass;\n\n    for (result in resultsTimes) {\n      resultsDetails.push(resultsTimes[result]);\n    }\n    let latestResult = resultsDetails[0];\n    \n    let resultOpen = latestResult[\"1. open\"];\n    let resultHight = latestResult[\"2. high\"];\n    let resultLow = latestResult[\"3. low\"];\n    let resultClose = latestResult[\"4. close\"];\n    let resultVolume = latestResult[\"5. volume\"];\n    \n    let resultSymbol = resultMeta[\"2. Symbol\"];\n    let resultRefreshed = resultMeta[\"3. Last Refreshed\"];\n    /* if (resultsDetails[1] === '' || resultsDetails[1] === null || typeof resultsDetails[1] === 'undefined'){\n      percentageResult = '0';\n      positiveOrNegativeClass = 'value-default';\n      positiveOrNegativeClass = 'value-default';\n    }else{\n      let valueCloseToPreviousDay = resultsDetails[1][\"4. close\"];\n      percentageResult = generatesVariation(resultClose, valueCloseToPreviousDay);\n      numberIsPositive = Math.sign(percentageResult);\n      if (numberIsPositive === 1 || numberIsPositive === 0){\n        positiveOrNegativeClass = 'value-positive';\n      }else{\n        positiveOrNegativeClass = 'value-negative';\n      }\n    }  */\n\n\n    let viewHTML = `<div class=\"box-actions--symbol\"><span>Symbol</span> ${resultSymbol} / <div class=\"box-actions--percentage\"></div></div>\n          <div class=\"box-actions--refreshed\"><span>Last Refreshed:</span> ${resultRefreshed}</div>\n          <ul class=box-actions--values>\n            <li><span>Open:</span> ${parseFloat(resultOpen).toFixed(2)}</li>\n            <li><span>Close:</span> ${parseFloat(resultClose).toFixed(2)}</li>\n            <li><span>Hight:</span> ${parseFloat(resultHight).toFixed(2)}</li>\n            <li><span>Low:</span> ${parseFloat(resultLow).toFixed(2)}</li>\n            <li><span>Volume:</span> ${parseFloat(resultVolume).toFixed(2)}</li>\n          </ul>`;\n    \n    document.querySelector('[data-symbol=\"'+ resultSymbol +'\"]').insertAdjacentHTML('beforeend', viewHTML);\n\n    getActionsClosePreviousDay(resultSymbol, resultClose)\n    \n  }\n  function startAjax(){\n    actionsLi.forEach(function(item, index){\n      getActions(item.getAttribute('data-symbol'));\n    });\n  }\n  startAjax();\n})();\n"]}