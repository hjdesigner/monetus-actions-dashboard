{"version":3,"sources":["scripts.min.js"],"names":["symbols","actions","xhr","XMLHttpRequest","open","getActions","apikey","symbol","status","porcetagem","resultsTimes","result","resultMeta","resultsDetails","percentageResult","numberIsPositive","latestResult","resultHight","resultOpen","resultLow","resultVolume","resultRefreshed","resultSymbol","positiveOrNegativeClass","valueNew","valueOld","newResult","parseFloat","oldResult","generatesVariation","resultClose","valueCloseToPreviousDay","viewHTML","toFixed","main","insertAdjacentHTML","onreadystatechange","parse","response","console","send","document","querySelector","forEach","name"],"mappings":"cAAA,WAGE,SAAMA,EAAWC,GACjB,IAIMC,EAAM,IAAIC,eAFhBD,EAAAE,KAASC,MAAT,uEAA6BJ,EAA7B,cAA6BK,EAA7B,kBACEJ,EAAIK,mBAAJ,WACcJ,IAAVD,EAAAA,aACJ,MAAIE,EAAKI,OAiBT,SAAkBC,GACnB,IAAAC,EAAAC,EAAA,uBAIKC,EAAaD,EAAO,aAF1BE,KACMH,OAAAA,EACAE,OAAAA,EACAC,OAAAA,EACJ,IAAIC,KAAAA,EACJD,EAAIE,KAAAA,EAAJJ,IAEA,IAAAK,EAAeN,EAAc,GAGzBM,EAAAA,EAAeH,WAIfI,EAAcD,EAAa,WAD3BE,EAAAA,EAAaF,UACbC,EAAcD,EAAa,YAC3BG,EAAYH,EAAa,aAEzBI,EAAeJ,EAAAA,aAGfK,EAAkBT,EAAW,qBADjC,GAAmBA,KAAfU,EAAeV,IAAnB,OAA8BC,EAA9B,SAAA,IAAAA,EAAA,GACAC,EAAIO,IACJE,EAAI,gBACFT,EAAA,oBACAS,CACAA,IAAAA,EAA0BV,EAA1B,GAAA,YAHFC,EA/BAZ,SAAAsB,EAAAC,GACD,IAAAC,EAAAC,WAAAH,GAIKI,EAAYD,WAAWF,GAF7BhB,GAASoB,EAAmBL,GAA5BI,EAAgD,IAC9C,OAAIF,KAAAA,MAAuBF,IAAXG,GAAhB,IA+BKE,CAAAC,EAAAC,GACHhB,EAAIgB,KAAAA,KAAAA,GAEJhB,EADmBc,IAAnBf,GAAmDiB,IAAhCF,EACA,iBAES,iBAO9B,IAAIG,EAAAA,0BAAqCT,EAArC,sEAAqCA,EAArC,0CAAAA,EAAA,KACyDD,EADzD,6FAEqED,EAFrE,wFAcLM,WAAAT,GAAAe,QAAA,GAdK,8CAecN,WAAAG,GAAAG,QAAA,GAfd,8CAgB0BN,WAAAV,GAAAgB,QAAA,GAhB1B,4CAiBFN,WAAAR,GAAAc,QAAA,GAjBE,+CAgBJN,WAAAP,GAAAa,QAAA,GAhBI,wCAYJC,EAAKC,mBAAmB,YAAaH,GApEjCI,CAAAA,KAAJC,MAAyBnC,EAAAoC,WAErBC,QAAO/B,IAAJ,gBAIFN,EAAAsC,OAhBR,IAAAlC,EAAU,mBACTN,GAAA,SAAA,QAAA,QAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,SAGMkC,EAAOO,SAASC,cAAc,uBA8ElC1C,EAAQ2C,QAAQ,SAASC,GACvBvC,EAAWuC,KAnFjB","file":"scripts.min.js","sourcesContent":["(function(){\n  'use strict';\n  const apikey = 'JC86LIY595WFPL8F';\n  const symbols = ['PIBB11', 'NATU3', 'GRND3', 'CVCB3', 'IVVB11', 'ESTC3', 'CGRA3', 'VVAR11', 'PTBL3', 'RAPT4', 'EZTC3', 'CIEL3', 'MDIA3', 'SMLS3', 'BVMF3', 'SLED4'];\n  const main = document.querySelector('[data-js=\"actions\"]');\n\n  function getActions(actions) {\n    var symbol = actions;\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${actions}.SA&apikey=${apikey}&datatype=json`);\n    xhr.onreadystatechange = () => {\n      if(xhr.readyState === 4){\n        if(xhr.status === 200){\n          viewActions(JSON.parse(xhr.response));\n        }else{\n          console.log('deu errado');\n        }\n      }\n    }\n    xhr.send();\n  }\n\n  function generatesVariation(valueNew, valueOld) {\n    let newResult = parseFloat(valueNew);\n    let oldResult = parseFloat(valueOld);\n    let porcetagem = (((newResult - oldResult) / oldResult) * 100);\n    return Math.round(porcetagem * 100) / 100;\n  }\n\n  function viewActions(result){\n    let resultsTimes = result[\"Time Series (Daily)\"];\n    let resultMeta = result[\"Meta Data\"];\n    let resultsDetails = [];\n    let percentageResult;\n    let numberIsPositive;\n    let positiveOrNegativeClass;\n    for (result in resultsTimes) {\n      resultsDetails.push(resultsTimes[result]);\n    }\n    let latestResult = resultsDetails[0];\n\n    \n    let resultOpen = latestResult[\"1. open\"];\n    let resultHight = latestResult[\"2. high\"];\n    let resultLow = latestResult[\"3. low\"];\n    let resultClose = latestResult[\"4. close\"];\n    let resultVolume = latestResult[\"5. volume\"];\n    \n    let resultSymbol = resultMeta[\"2. Symbol\"];\n    let resultRefreshed = resultMeta[\"3. Last Refreshed\"];\n    if (resultsDetails[1] === '' || resultsDetails[1] === null || typeof resultsDetails[1] === 'undefined'){\n      percentageResult = '0';\n      positiveOrNegativeClass = 'value-default';\n      positiveOrNegativeClass = 'value-default';\n    }else{\n      let valueCloseToPreviousDay = resultsDetails[1][\"4. close\"];\n      percentageResult = generatesVariation(resultClose, valueCloseToPreviousDay);\n      numberIsPositive = Math.sign(percentageResult);\n      if (numberIsPositive === 1 || numberIsPositive === 0){\n        positiveOrNegativeClass = 'value-positive';\n      }else{\n        positiveOrNegativeClass = 'value-negative';\n      }\n    } \n\n\n    let viewHTML = `<li class=\"box-actions ${positiveOrNegativeClass}\">\n          <div class=\"box-actions--symbol\"><span>Symbol</span> ${resultSymbol} / <div class=\"box-actions--percentage ${positiveOrNegativeClass}\">${percentageResult}%</div></div>\n          <div class=\"box-actions--refreshed\"><span>Last Refreshed:</span> ${resultRefreshed}</div>\n          <ul class=box-actions--values>\n            <li><span>Open:</span> ${parseFloat(resultOpen).toFixed(2)}</li>\n            <li><span>Close:</span> ${parseFloat(resultClose).toFixed(2)}</li>\n            <li><span>Hight:</span> ${parseFloat(resultHight).toFixed(2)}</li>\n            <li><span>Low:</span> ${parseFloat(resultLow).toFixed(2)}</li>\n            <li><span>Volume:</span> ${parseFloat(resultVolume).toFixed(2)}</li>\n          </ul>\n        </li>`;\n    \n    main.insertAdjacentHTML('beforeend', viewHTML);\n    \n  }\n  function startAjax(){\n    symbols.forEach(function(name){\n      getActions(name);\n    });\n  }\n  startAjax();\n})();\n"]}