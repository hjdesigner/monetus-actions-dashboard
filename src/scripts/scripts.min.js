(function(){
  'use strict';
  const apikey = 'JC86LIY595WFPL8F';
  const symbols = ['PIBB11', 'NATU3', 'GRND3', 'CVCB3', 'IVVB11', 'ESTC3', 'CGRA3', 'VVAR11', 'PTBL3', 'RAPT4', 'EZTC3', 'CIEL3', 'MDIA3', 'SMLS3', 'BVMF3', 'SLED4'];
  const main = document.querySelector('[data-js="actions"]');

  function getActions(actions) {
    var symbol = actions;
    var xhr = new XMLHttpRequest();
    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${actions}.SA&apikey=${apikey}&datatype=json`);
    xhr.onreadystatechange = () => {
      if(xhr.readyState === 4){
        if(xhr.status === 200){
          viewActions(JSON.parse(xhr.response));
        }else{
          console.log('deu errado');
        }
      }
    }
    xhr.send();
  }

  function generatesVariation(valueNew, valueOld) {
    let newResult = parseFloat(valueNew);
    let oldResult = parseFloat(valueOld);
    let porcetagem = (((newResult - oldResult) / oldResult) * 100);
    return Math.round(porcetagem * 100) / 100;
  }

  function viewActions(result){
    let resultsTimes = result["Time Series (Daily)"];
    let resultMeta = result["Meta Data"];
    let resultsDetails = [];
    let percentageResult;
    let numberIsPositive;
    let positiveOrNegativeClass;
    for (result in resultsTimes) {
      resultsDetails.push(resultsTimes[result]);
    }
    let latestResult = resultsDetails[0];

    
    let resultOpen = latestResult["1. open"];
    let resultHight = latestResult["2. high"];
    let resultLow = latestResult["3. low"];
    let resultClose = latestResult["4. close"];
    let resultVolume = latestResult["5. volume"];
    
    let resultSymbol = resultMeta["2. Symbol"];
    let resultRefreshed = resultMeta["3. Last Refreshed"];
    if (resultsDetails[1] === '' || resultsDetails[1] === null || typeof resultsDetails[1] === 'undefined'){
      percentageResult = '0';
      positiveOrNegativeClass = 'value-default';
      positiveOrNegativeClass = 'value-default';
    }else{
      let valueCloseToPreviousDay = resultsDetails[1]["4. close"];
      percentageResult = generatesVariation(resultClose, valueCloseToPreviousDay);
      numberIsPositive = Math.sign(percentageResult);
      if (numberIsPositive === 1 || numberIsPositive === 0){
        positiveOrNegativeClass = 'value-positive';
      }else{
        positiveOrNegativeClass = 'value-negative';
      }
    } 


    let viewHTML = `<li class="box-actions ${positiveOrNegativeClass}">
          <div class="box-actions--symbol"><span>Symbol</span> ${resultSymbol} / <div class="box-actions--percentage ${positiveOrNegativeClass}">${percentageResult}%</div></div>
          <div class="box-actions--refreshed"><span>Last Refreshed:</span> ${resultRefreshed}</div>
          <ul class=box-actions--values>
            <li><span>Open:</span> ${parseFloat(resultOpen).toFixed(2)}</li>
            <li><span>Close:</span> ${parseFloat(resultClose).toFixed(2)}</li>
            <li><span>Hight:</span> ${parseFloat(resultHight).toFixed(2)}</li>
            <li><span>Low:</span> ${parseFloat(resultLow).toFixed(2)}</li>
            <li><span>Volume:</span> ${parseFloat(resultVolume).toFixed(2)}</li>
          </ul>
        </li>`;
    
    main.insertAdjacentHTML('beforeend', viewHTML);
    
  }
  function startAjax(){
    symbols.forEach(function(name){
      getActions(name);
    });
  }
  startAjax();
})();
