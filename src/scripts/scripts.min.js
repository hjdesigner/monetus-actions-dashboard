(function(){
  'use strict';
  const apikey = 'JC86LIY595WFPL8F';
  const actionsLi = document.querySelectorAll('[data-js="actions"]');
  
  function getActions(actions) {
    let symbol = actions;
    const xhr = new XMLHttpRequest();

    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${symbol}&interval=1min&apikey=${apikey}&datatype=json`);
    xhr.onreadystatechange = () => {
      if(xhr.readyState === 4){
        if(xhr.status === 200){
          viewActions(JSON.parse(xhr.response));
        }else{
          console.log('deu errado');
        }
      }
    }
    xhr.send();
  }

  function getActionsClosePreviousDay(actions, closeDay){
    let symbol = actions;
    let valueCloseDay = closeDay;
    const xhr = new XMLHttpRequest();
    xhr.open('GET', `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}.SA&apikey=${apikey}&datatype=json`);
    xhr.onreadystatechange = () => {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          closePreviousDay(JSON.parse(xhr.response), valueCloseDay);
        } else {
          console.log('deu errado');
        }
      }
    }
    xhr.send();
  }

  function generatesVariation(valueNew, valueOld) {
    let newResult = parseFloat(valueNew);
    let oldResult = parseFloat(valueOld);
    let porcetagem = (((newResult - oldResult) / oldResult) * 100);
    return Math.round(porcetagem * 100) / 100;
  }

  function closePreviousDay(result, valueCloseDay){
    let resultsDaily = result["Time Series (Daily)"];
    let resultMeta = result["Meta Data"];
    let resultFinish = [];

    for (result in resultsDaily) {
      resultFinish.push(resultsDaily[result]);
    }

    let latestResult = resultFinish[0];

    let resultClose = latestResult["4. close"];
    let resultSymbol = resultMeta["2. Symbol"];

    //console.log(resultSymbol, resultClose, valueCloseDay);

    let newResult = parseFloat(valueCloseDay);
    let oldResult = parseFloat(resultClose);
    let porcetagem = (((newResult - oldResult) / oldResult) * 100);
    let porcetagemFinish = Math.round(porcetagem * 100) / 100;
    
    //document.querySelector('[data-symbol="' + resultSymbol + '"]').setAttribute('closeDay', 'resultClose');
    document.querySelector('[data-symbol="' + resultSymbol + '"] .box-actions--percentage').insertAdjacentHTML('beforeend', porcetagemFinish);
  }

  function viewActions(result){
    let resultsTimes = result["Time Series (1min)"];
    let resultMeta = result["Meta Data"];
    let resultsDetails = [];
    let percentageResult;
    let numberIsPositive;
    let positiveOrNegativeClass;

    for (result in resultsTimes) {
      resultsDetails.push(resultsTimes[result]);
    }
    let latestResult = resultsDetails[0];
    
    let resultOpen = latestResult["1. open"];
    let resultHight = latestResult["2. high"];
    let resultLow = latestResult["3. low"];
    let resultClose = latestResult["4. close"];
    let resultVolume = latestResult["5. volume"];
    
    let resultSymbol = resultMeta["2. Symbol"];
    let resultRefreshed = resultMeta["3. Last Refreshed"];
    /* if (resultsDetails[1] === '' || resultsDetails[1] === null || typeof resultsDetails[1] === 'undefined'){
      percentageResult = '0';
      positiveOrNegativeClass = 'value-default';
      positiveOrNegativeClass = 'value-default';
    }else{
      let valueCloseToPreviousDay = resultsDetails[1]["4. close"];
      percentageResult = generatesVariation(resultClose, valueCloseToPreviousDay);
      numberIsPositive = Math.sign(percentageResult);
      if (numberIsPositive === 1 || numberIsPositive === 0){
        positiveOrNegativeClass = 'value-positive';
      }else{
        positiveOrNegativeClass = 'value-negative';
      }
    }  */


    let viewHTML = `<div class="box-actions--symbol"><span>Symbol</span> ${resultSymbol} / <div class="box-actions--percentage"></div></div>
          <div class="box-actions--refreshed"><span>Last Refreshed:</span> ${resultRefreshed}</div>
          <ul class=box-actions--values>
            <li><span>Open:</span> ${parseFloat(resultOpen).toFixed(2)}</li>
            <li><span>Close:</span> ${parseFloat(resultClose).toFixed(2)}</li>
            <li><span>Hight:</span> ${parseFloat(resultHight).toFixed(2)}</li>
            <li><span>Low:</span> ${parseFloat(resultLow).toFixed(2)}</li>
            <li><span>Volume:</span> ${parseFloat(resultVolume).toFixed(2)}</li>
          </ul>`;
    
    document.querySelector('[data-symbol="'+ resultSymbol +'"]').insertAdjacentHTML('beforeend', viewHTML);

    getActionsClosePreviousDay(resultSymbol, resultClose)
    
  }
  function startAjax(){
    actionsLi.forEach(function(item, index){
      getActions(item.getAttribute('data-symbol'));
    });
  }
  startAjax();
})();
